package com.github.rostmyr.jrpc.common.utils;

import com.github.rostmyr.jrpc.common.annotation.ResourceId;
import com.github.rostmyr.jrpc.common.bytecode.ResourceClassTransformer;
import com.github.rostmyr.jrpc.common.io.Resource;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.function.Supplier;

/**
 * Util class to work with {@link Resource} classes
 * Rostyslav Myroshnychenko
 * on 26.05.2018.
 */
public final class ResourceUtils {
    private ResourceUtils() {
        // util class
    }

    /**
     * Gets resource id by checking the static field generated by maven plugin
     *
     * @param resource resource class
     * @return resource id
     * @throws IllegalArgumentException in case if the given class misses the field with id
     * @see ResourceId
     */
    public static int getResourceId(Class<? extends Resource> resource) {
        try {
            Field field = resource.getField(ResourceClassTransformer.RESOURCE_ID_FIELD);
            return field.getInt(null); // static
        } catch (NoSuchFieldException e) {
            throw new IllegalArgumentException(
                "The given class " + resource + " doesn't have an auto-generated _resourcId field");
        } catch (IllegalAccessException e) {
            throw new IllegalArgumentException("Can't access resource id field in " + resource + ".");
        }
    }

    /**
     * Gets resource supplier by invoking the static method generated by maven plugin
     *
     * @param resource resource class
     * @return supplier to produce a new resource
     * @throws IllegalArgumentException in case if the given class misses the method or it's private
     * @see ResourceId
     */
    @SuppressWarnings("unchecked")
    public static <T extends Resource> Supplier<T> getResourceSupplier(Class<T> resource) {
        try {
            Method method = resource.getMethod(ResourceClassTransformer.RESOURCE_ID_SUPPLIER, null);
            return (Supplier<T>) method.invoke(null);
        } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
            throw new IllegalArgumentException(
                "Can't call an auto-generated 'create' method on the given class " + resource
            );
        }
    }
}
